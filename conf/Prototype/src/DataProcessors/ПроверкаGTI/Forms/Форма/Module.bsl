///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО Фобизнес ПРО
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Процедура - Обработчик события "ПриОткрытии" формы
//
// Параметры:
//  Отказ	 - Булево - Отказ 
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СкрытьПараметрыИСтраницыМетода();
	
КонецПроцедуры

// Процедура - Обработчик команды "Инициализация"
//
// Параметры:
//  Команда	 - КомандаФормы - Команда формы "Инициализация"
//
&НаКлиенте
Процедура Инициализация(Команда)
	
	ВыполнитьМетод_ПоКоманде();
	
КонецПроцедуры

// Процедура - Обработчик команды "Выполнить"
//
// Параметры:
//  Команда	 - КомандаФормы - Команда формы "Выполнить" 
//
&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
	
	ВыполнитьМетод_ПоКоманде();
	
КонецПроцедуры

// Процедура - Отключить отбор по скважине
// Восстанавливает исходную таблицу, полученную от сервиса
//
// Параметры:
//  Команда	 - КомандаФормы - Команда формы "ОтключитьОтборПоСкважине" 
//
&НаКлиенте
Процедура ОтключитьОтборПоСкважине(Команда)
	
	wellbores_ВыводНаФорму.Очистить();
	Для Каждого СтрокаИсточник Из wellbores Цикл 
		НоваяСтрока = wellbores_ВыводНаФорму.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник);
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Получить шаблон запроса скважин
// Заполняет на странице "Настройка", реквизит "QueryIn" и "WMLTypeIn" 
//
// Параметры:
//  Команда	 - КомандаФормы - Команда формы "ПолучитьШаблон_ЗапросСкважин"
//
&НаКлиенте
Процедура ПолучитьШаблон_ЗапросСкважин(Команда)
	
	ПолучитьШаблонЗапроса_ПоКоманде("WMLS_GetFromStore", "well");
	
КонецПроцедуры

// Процедура - Получить шаблон запроса стволов
// Заполняет на странице "Настройка", реквизит "QueryIn" и "WMLTypeIn" 
//
// Параметры:
//  Команда	 - КомандаФормы - Команда формы "ПолучитьШаблон_ЗапросСтволов"
//
&НаКлиенте
Процедура ПолучитьШаблон_ЗапросСтволов(Команда)
	
	ПолучитьШаблонЗапроса_ПоКоманде("WMLS_GetFromStore", "wellbore");
	
КонецПроцедуры

// Процедура - Обработчик события "ПриИзменении" реквизита формы "Метод"
//
// Параметры:
//  Элемент	 - ПолеФормы - Реквизит "Метод"
//
&НаКлиенте
Процедура МетодПриИзменении(Элемент)
	
	СкрытьПараметрыИСтраницыМетода();
	ОчиститьРезультатыНаФорме();
	ДобавитьРеквизитыПараметровМетодаНаФорму_НаСервере(Элемент.ВыделенныйТекст);	
	
КонецПроцедуры

// Процедура - Обработчик события "ПриАктивизацииСтроки" таблицы "wells"
//
// Параметры:
//  Элемент	 - Булево - Отказ 
//
&НаКлиенте
Процедура wellsПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработкаОжидания_ПриАктивизацииСтроки_wells", 0.5, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура - Выполнение метода
// При выполнении сценарий исполнения определяется структурой доступных методов полученных при инициализации (WMLS_GetCap) или от выбранного значения в реквизите "Метод"
//
&НаКлиенте
Процедура ВыполнитьМетод_ПоКоманде()
	
	ПараметрыМетода = ИнициализироватьОбязательнуюСтруктуруМетода();
	ДобавитьПараметрыМетода(ПараметрыМетода);
	
	Результат = РаботаСGTIOnlineВызовСервера.ВыполнитьМетод(ПараметрыМетода);
	
	Если Результат.Успешно = 0 Тогда 
		
		Элементы.ГруппаОсновная.Доступность = Ложь;
		
		Метод = "WMLS_GetCap";
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не предсказуемая ошибка работы с GTIONLINE'"
		+ "; en = 'Unpredictable error with GTIONLINE'");
		Сообщение.Сообщить();
		
	ИначеЕсли Результат.Успешно = 1 Тогда  
		
		Элементы.ГруппаОсновная.Доступность = Истина;	
		
		РаботаСGTIOnlineВызовСервера.ПрочитатьРезультат(Результат);
		
	ИначеЕсли Результат.Успешно = "Function completed successfully" Тогда 	
		
		Элементы.ГруппаОсновная.Доступность = Истина;
		
	КонецЕсли;
	
	ВывестиРезультатВыполненияМетодаНаФорму(Результат); 
	
	Если Метод = "WMLS_GetCap" И Результат.Свойство("таблицаСвойстваWSDL") Тогда 			
		ВывестиДоступныеМетодыНаФорму(Результат);		
	КонецЕсли;	
	
КонецПроцедуры	

// Функция - Инициализировать обязательную структуру метода
// 
// Возвращаемое значение:
//  Структура - Параметры метода
//    * ИмяМетода - Строка - Метод исполняемый сервисом (Всегда доступны: WMLS_GetCap и WMLS_GetVersion).
//    * Логин     - Строка - Данные авторизации.
//    * Пароль    - Строка - Данные авторизации.
//
&НаКлиенте
Функция ИнициализироватьОбязательнуюСтруктуруМетода()
	
	ПараметрыМетода = Новый Структура("ИмяМетода, Логин, Пароль", Метод, Логин, Пароль);
	Возврат ПараметрыМетода;
	
КонецФункции

// Процедура - Скрыть все параметры и страницы относящиеся к методу
// Для каждого метода собственные наборы свойств и страницы с данными, сначала все их скроем
//
&НаКлиенте
Процедура СкрытьПараметрыИСтраницыМетода()
	
	Для Каждого ЭлементФормы Из Элементы.ГруппаПараметрыМетода.ПодчиненныеЭлементы Цикл 
		ЭлементФормы.Видимость = Ложь;
	КонецЦикла;
	
	Для Каждого СтраницаФормы Из Элементы.СтраницыОсновные.ПодчиненныеЭлементы Цикл 
		Если СтраницаФормы.Имя <> "СтраницаНастройки" Тогда 
			СтраницаФормы.Видимость = Ложь;	
		КонецЕсли;			
	КонецЦикла;	
	
КонецПроцедуры

// Процедура - Очистить результаты на форме
//
&НаКлиенте
Процедура ОчиститьРезультатыНаФорме()
	
	РезультатЗапроса = "";
	Ошибка 			 = "";
		
КонецПроцедуры

// Процедура - Добавить реквизиты параметров метода на форму
// В зависимости от метода определяется свой список свойств и страниц на форме, общий список определяется в общем модуле "РаботаСGTIOnlineПовтИсп"
//
// Параметры:
//  ИмяМетода	 - Строка - Выбранный метод на форме
//
&НаСервере
Процедура ДобавитьРеквизитыПараметровМетодаНаФорму_НаСервере(ИмяМетода)
	
	тзНастройкиДоступныхПолейМетодов = РаботаСGTIOnlineВызовСервераПовтИсп.ОпределитьНастройкиМетодов();
	СтрокиНастройки = тзНастройкиДоступныхПолейМетодов.НайтиСтроки(Новый Структура("Метод", ИмяМетода));
	Для Каждого СтрокаНастройки Из СтрокиНастройки Цикл 
		Если СтрокаНастройки.ЭтоИсходящееСвойство Тогда 	
			
			Элементы[СтрокаНастройки.ДоступноеПоле].Видимость = Истина;
			
		КонецЕсли;		
	КонецЦикла;	
	
	НайденнаяСтраницаМетода = Элементы.Найти("Страница_" + ИмяМетода);
	Если НайденнаяСтраницаМетода <> Неопределено Тогда 
		НайденнаяСтраницаМетода.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Добавить параметры метода с формы
// Параметры определяются в общем модуля "РаботаСGTIOnlineПовтИсп" для каждого метода
//
// Параметры:
//  ПараметрыМетода	 - Структура - Параметры метода
//    * ИмяМетода - Строка - Метод исполняемый сервисом (Всегда доступны: WMLS_GetCap и WMLS_GetVersion).
//    * Логин     - Строка - Данные авторизации.
//    * Пароль    - Строка - Данные авторизации.
//
&НаКлиенте
Процедура ДобавитьПараметрыМетода(ПараметрыМетода)
	
	Для Каждого ЭлементФормы Из Элементы.ГруппаПараметрыМетода.ПодчиненныеЭлементы Цикл 
		Если ЭлементФормы.Видимость Тогда 
			ПараметрыМетода.Вставить(ЭлементФормы.Имя, ЭлементФормы.ТекстРедактирования);
		КонецЕсли;	
	КонецЦикла;		
	
КонецПроцедуры	

// Процедура - Вывести результат выполнения метода на форму
//
// Параметры:
//  Результат	 - Структура - Параметры работы с сервисом: 
//    * ИмяМетода 			- Строка - Метод исполняемый сервисом (Всегда доступны: WMLS_GetCap и WMLS_GetVersion).
//    * Успешно   			- Число  - Если успешно тогда 1, если не успешно тогда 0, метод WMLS_GetVersion возвращает номер версии протокола.
//    * ПутьКФайлу		    - Строка - В предыдущей процедуре ответ в виде XML строки записывается во временный файл, который здесь будем прочитан. 
//    * Остальные свойства формируются динамически, в зависимости от метода. Общий модуль "РаботаСGTIOnlineПовтИсп" определяет набор свойств и возможных доступных методов 
//
&НаКлиенте
Процедура ВывестиРезультатВыполненияМетодаНаФорму(Результат)
	
	ОчиститьРезультатыНаФорме();
	
	Если Метод = "WMLS_GetVersion" Или Метод = "WMLS_GetBaseMsg" Тогда 
		РезультатЗапроса = Результат.Успешно;	
		
	Иначе 	
		
		Если Результат.Свойство("СтрокаXMLОтвета") Тогда 
			Результат.Свойство(Результат.СтрокаXMLОтвета, РезультатЗапроса);	
		КонецЕсли;	
		
		Если Результат.Свойство("СтрокаПоляОшибки") Тогда 
			Результат.Свойство(Результат.СтрокаПоляОшибки, Ошибка);
		КонецЕсли;
				
	КонецЕсли;
	
	Если Результат.Свойство("Структура_ОбработанныйОтветОтСервиса") Тогда 
		
		Если Результат.Структура_ОбработанныйОтветОтСервиса.Свойство("Заголовок") Тогда 	
			
			ИмяТаблицы = Результат.Структура_ОбработанныйОтветОтСервиса.Заголовок;
			КоллекцияЗначенийНаФорме = ЭтаФорма[ИмяТаблицы];
			КоллекцияЗначенийНаФорме.Очистить();
			
			Если ИмяТаблицы = "wellbores" Тогда 
				КоллекцияЗначенийНаФорме_ВыводНаФорму = ЭтаФорма[ИмяТаблицы + "_ВыводНаФорму"];
				КоллекцияЗначенийНаФорме_ВыводНаФорму.Очистить();		
			КонецЕсли;
			
			Для Каждого СтрокаОтветаОтСервиса Из Результат.Структура_ОбработанныйОтветОтСервиса.МассивСодержание Цикл 
				НоваяСтрока = КоллекцияЗначенийНаФорме.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтветаОтСервиса);
				
				// TODO Сделать нормально
				Если ИмяТаблицы = "wellbores" Тогда 
					КоллекцияЗначенийНаФорме_ВыводНаФорму = ЭтаФорма[ИмяТаблицы + "_ВыводНаФорму"];
					НоваяСтрока_ВыводНаФорму = КоллекцияЗначенийНаФорме_ВыводНаФорму.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока_ВыводНаФорму, СтрокаОтветаОтСервиса);	
					
				КонецЕсли;
				
			КонецЦикла;	
			
		Иначе 
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Не найден заголовок ответа от сервиса GTI-Online'");
			Сообщение.Сообщить();
			
		КонецЕсли;		
		
		Элементы.СтраницыОсновные.ТекущаяСтраница = Элементы["Страница_" + Результат.ИмяМетода];
				
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Вывести доступные методы на форму
// Доступные методы определяются сначала по общей таблице из общего модуля "РаботаСGTIOnlineПовтИсп" и далее по доступности методов на сервисе
//
// Параметры:
//  Результат	 - Структура - Параметры работы с сервисом: 
//    * ИмяМетода 			- Строка - Метод исполняемый сервисом (Всегда доступны: WMLS_GetCap и WMLS_GetVersion).
//    * Успешно   			- Число  - Если успешно тогда 1, если не успешно тогда 0, метод WMLS_GetVersion возвращает номер версии протокола.
//    * ПутьКФайлу		    - Строка - В предыдущей процедуре ответ в виде XML строки записывается во временный файл, который здесь будем прочитан. 
//    * Остальные свойства формируются динамически, в зависимости от метода. Общий модуль "РаботаСGTIOnlineПовтИсп" определяет набор свойств и возможных доступных методов
//
&НаКлиенте
Процедура ВывестиДоступныеМетодыНаФорму(Результат)
	
	Элементы.Метод.СписокВыбора.Очистить();
	Элементы.WMLtypeIn.СписокВыбора.Очистить();
	
	ПредыдущаяФункция = Неопределено;
	Для Каждого Свойство Из Результат.таблицаСвойстваWSDL Цикл 
		
		Если Свойство.Функция = "WMLS_GetFromStore" Тогда	
			Элементы.WMLtypeIn.СписокВыбора.Добавить(Свойство.ОбъектДанных);
		КонецЕсли;
		
		Если ПредыдущаяФункция <> Свойство.Функция Тогда 
			Элементы.Метод.СписокВыбора.Добавить(Свойство.Функция);
			ПредыдущаяФункция = Свойство.Функция;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

// Процедура - Получить шаблон запроса по команде
//
// Параметры:
//  ИмяМетода			 - Строка - Предопределенное значение WMLS_GetFromStore 
//  Значение_WMLtypeIn	 - Строка - Предопределенное значение well или wellbore
//
&НаКлиенте
Процедура ПолучитьШаблонЗапроса_ПоКоманде(Знач ИмяМетода, Знач Значение_WMLtypeIn)
	
	СтруктураОтвета = РаботаСGTIOnlineВызовСервераПовтИсп.ОпределитьНастройкиЗапросаКМетоду_ПоШаблону(Значение_WMLtypeIn);		
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураОтвета);	
	Элементы.СтраницыОсновные.ТекущаяСтраница = Элементы.СтраницаНастройки;
	
КонецПроцедуры

// Процедура - Обработка ожидания "ПриАктивизацииСтроки" таблицы "wells"
//
&НаКлиенте
Процедура ОбработкаОжидания_ПриАктивизацииСтроки_wells() Экспорт 
		
	wellbores_ВыводНаФорму.Очистить();
	Для Каждого СтрокаИсточник Из wellbores Цикл 
		Если Элементы.wells.ТекущиеДанные.uid = СтрокаИсточник.uidWell Тогда 
			НоваяСтрока = wellbores_ВыводНаФорму.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник);
		Иначе 
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 
	
#КонецОбласти

#Область Инициализация

Если ПустаяСтрока(Метод) Тогда 
	Метод = "WMLS_GetCap";
КонецЕсли;

#КонецОбласти
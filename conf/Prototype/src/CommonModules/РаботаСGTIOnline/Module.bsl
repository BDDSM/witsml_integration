///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО Фобизнес
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Функция ВыполнитьМетод(ПараметрыМетода) Экспорт 
	
	ИмяМетода = ПараметрыМетода.ИмяМетода;
	
	тзНастройкиДоступныхПолейМетодов = РаботаСGTIOnlineПовтИсп.ОпределитьНастройкиМетодов();
		
	Сервис = WSССылки.GTIONLINE.ПолучитьWSОпределения().Сервисы.Получить(0);
	Прокси = WSССылки.GTIONLINE.СоздатьWSПрокси(Сервис.URIПространстваИмен, Сервис.Имя, Сервис.ТочкиПодключения[0].Имя);
	Прокси.Пользователь = ПараметрыМетода.Логин;
	Прокси.Пароль 		= ПараметрыМетода.Пароль;
	
	Результат = ИнициализироватьОбязательнуюСтруктуруРезультата(ИмяМетода);
	
	СтрокиНастроек = ПолучитьСтрокиНастроекМетодаПоИмени(тзНастройкиДоступныхПолейМетодов, Результат);
	
	ДобавитьВРезультатПараметрыМетода(Результат, ПараметрыМетода, СтрокиНастроек);
		
	ПолучитьОтвет(Прокси, Результат);
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьОтвет(Прокси, Результат) Экспорт 
	
	Ответ = 0;	
	Попытка	
		Выполнить("Ответ = Прокси." + Результат.ИмяМетода + "(" + Результат.СтрокаПараметрыМетоды + ");");	
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка получение ответа от " + Метаданные.WSСсылки.GTIONLINE.Синоним, 
        УровеньЖурналаРегистрации.Ошибка,
        Метаданные.WSСсылки.GTIONLINE,
        ,
        ОписаниеОшибки());	
	КонецПопытки;
	Результат.Вставить("Успешно", Ответ);	

КонецПроцедуры

Процедура ПрочитатьРезультат(Результат) Экспорт 

	ПутьКФайлу = ПолучитьИмяВременногоФайла("xml");
	ЗаписатьТекст = Новый ТекстовыйДокумент;
	ЗаписатьТекст.УстановитьТекст(Результат[Результат.СтрокаXMLОтвета]);
	ЗаписатьТекст.Записать(ПутьКФайлу, "UTF-8");
	
	Результат.Вставить("ПутьКФайлу", ПутьКФайлу);

	// TODO Разбор WMLS_GetFromStore
	Если Результат.ИмяМетода = "WMLS_GetCap" Тогда 
		WMLS_GetCap_РазобратьОтвет(Результат);
	
	ИначеЕсли Результат.ИмяМетода = "WMLS_GetFromStore" Тогда	
		WMLS_GetFromStore_РазобратьОтвет(Результат);
		
	КонецЕсли;
	
	УдалитьФайлы(ПутьКФайлу);
	
КонецПроцедуры	

Процедура WMLS_GetCap_РазобратьОтвет(Результат) Экспорт 
	
	ПрочитьXMLСтрокуСПомощьюПостроителя(Результат);
	
	#Область TODO
	
	//спИменаУзлов = Новый СписокЗначений;
	//спИменаУзлов.Добавить("capServer");
	//спИменаУзлов.Добавить("function");
	//спИменаУзлов.Добавить("dataObj");
	//
	//Для Каждого ЭлИмяУзла из спИменаУзлов Цикл 
	//	ОбработатьДочерниеУзлы(Результат.Документ.ЭлементДокумента.ДочерниеУзлы, ЭлИмяУзла.Значение);
	//КонецЦикла;
	
	#КонецОбласти
	
	Для Каждого Элемент1Ур Из Результат.Документ.ЭлементДокумента.ДочерниеУзлы Цикл
		Если Элемент1Ур.ИмяУзла = "capServer" Тогда
			
			Для Каждого Элемент2Ур Из Элемент1Ур.ДочерниеУзлы Цикл 
				Если Элемент2Ур.ИмяУзла = "function" Тогда 
					
					НаимФункция = Элемент2Ур.Атрибуты[0].ЗначениеУзла;
					
					Для Каждого Элемент3Ур Из Элемент2Ур.ДочерниеУзлы Цикл 
						
						Для Каждого Атрибуты Из Элемент3Ур.ДочерниеУзлы Цикл												
							
							СтрокаСвойств = Новый Структура("Функция, ОбъектДанных", НаимФункция, Атрибуты.ЗначениеУзла);
							Результат.таблицаСвойстваWSDL.Добавить(СтрокаСвойств);							
							
						КонецЦикла;
						
					КонецЦикла;
					
					Если Элемент2Ур.ДочерниеУзлы.Количество() = 0 Тогда 
						
						СтрокаСвойств = Новый Структура("Функция, ОбъектДанных", НаимФункция, "нет данных");
						Результат.таблицаСвойстваWSDL.Добавить(СтрокаСвойств);
						
					КонецЕсли;	
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Результат.Удалить("Документ");
	Результат.Вставить("таблицаСвойстваWSDL", Результат.таблицаСвойстваWSDL);
	
КонецПроцедуры

Процедура WMLS_GetFromStore_РазобратьОтвет(Результат) Экспорт 
	
	ПрочитьXMLСтрокуСПомощьюПостроителя(Результат);	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИнициализироватьОбязательнуюСтруктуруРезультата(Знач ИмяМетода)
	Возврат Новый Структура("Успешно, ИмяМетода", 0, ИмяМетода);
КонецФункции	

Функция ПолучитьСтрокиНастроекМетодаПоИмени(Знач тзНастройкиДоступныхПолейМетодов, Результат)
	Возврат тзНастройкиДоступныхПолейМетодов.НайтиСтроки(Новый Структура("Метод, ЕстьДоступПоля", Результат.ИмяМетода, Истина));
КонецФункции	

Процедура ДобавитьВРезультатПараметрыМетода(Результат, Знач ПараметрыМетода, Знач СтрокиНастроек)
	
	Префикс = "Результат.";
	МассивПараметров = Новый Массив;
	Для Каждого СтрокаНастроек из СтрокиНастроек Цикл 
		МассивПараметров.Добавить(Префикс + СтрокаНастроек.ДоступноеПоле);	

		ЗначениеПарам = "";
		Если СтрокаНастроек.ЭтоИсходящееСвойство Тогда
			Если ПараметрыМетода.Свойство(СтрокаНастроек.ДоступноеПоле) Тогда
				ПараметрыМетода.Свойство(СтрокаНастроек.ДоступноеПоле, ЗначениеПарам);		
			КонецЕсли;		
				
		КонецЕсли;		
		
	    Результат.Вставить(СтрокаНастроек.ДоступноеПоле, ЗначениеПарам);
		
		Если СтрокаНастроек.ЭтоXMLОтвет Тогда 
			Результат.Вставить("СтрокаXMLОтвета", СтрокаНастроек.ДоступноеПоле);	
		КонецЕсли;	
		
		Если СтрокаНастроек.ЭтоОписаниеОшибки Тогда 
			Результат.Вставить("СтрокаПоляОшибки", СтрокаНастроек.ДоступноеПоле);	
		КонецЕсли;		
		
	КонецЦикла;	
	
	Результат.Вставить("СтрокаПараметрыМетоды", СтрСоединить(МассивПараметров, ","));
	
КонецПроцедуры	

Процедура ПрочитьXMLСтрокуСПомощьюПостроителя(Результат)
	
	таблицаСвойстваWSDL = Новый Массив;
	таблицаСвойстваWSDL.Очистить();
	
	МеханизмЧтения = Новый ЧтениеXML;
	МеханизмЧтения.ОткрытьФайл(Результат.ПутьКФайлу);
	Построитель = Новый ПостроительDOM;
	
	Документ = Построитель.Прочитать(МеханизмЧтения);

	МеханизмЧтения.Закрыть();
	
	Результат.Вставить("таблицаСвойстваWSDL", таблицаСвойстваWSDL);
	Результат.Вставить("Документ", Документ);
	
КонецПроцедуры

#Область TODO

//Процедура ОбработатьДочерниеУзлы(ДочерниеУзлы, ИмяУзла)
//	
//	Для Каждого Элемент из ДочерниеУзлы Цикл 
//		
//		Если Элемент.ИмяУзла = ИмяУзла Тогда 
//			
//			ОбработатьДочерниеУзлы(Элемент.ДочерниеУзлы, ИмяУзла);
//				
//	    КонецЕсли;
//	
//	КонецЦикла;
//	
//КонецПроцедуры	

//Функция ПроверитьУсловиеДляЭлементовДочернегоУзла()

//КонецФункции

#КонецОбласти

#КонецОбласти

